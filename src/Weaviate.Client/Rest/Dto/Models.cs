//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8600 // Disable "CS8600 Converting null literal or possible null value to non-nullable type"
#pragma warning disable 8602 // Disable "CS8602 Dereference of a possibly null reference"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace Weaviate.Client.Rest.Dto
{
    using System = global::System;



    /// <summary>
    /// the type of user
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UserTypeInput
    {

        [System.Runtime.Serialization.EnumMember(Value = @"db")]
        Db = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"oidc")]
        Oidc = 1,

    }

    /// <summary>
    /// the type of user
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UserTypeOutput
    {

        [System.Runtime.Serialization.EnumMember(Value = @"db_user")]
        Db_user = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"db_env_user")]
        Db_env_user = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"oidc")]
        Oidc = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserOwnInfo
    {
        /// <summary>
        /// The groups associated to the user
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("groups")]
        public System.Collections.Generic.ICollection<string>? Groups { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("roles")]
        public System.Collections.Generic.ICollection<Role>? Roles { get; set; } = default!;

        /// <summary>
        /// The username associated with the provided key
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("username")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Username { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static UserOwnInfo FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<UserOwnInfo>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DBUserInfo
    {
        /// <summary>
        /// The role names associated to the user
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("roles")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Roles { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// The user id of the given user
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string UserId { get; set; } = default!;

        /// <summary>
        /// type of the returned user
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("dbUserType")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public DBUserInfoDbUserType DbUserType { get; set; } = default!;

        /// <summary>
        /// activity status of the returned user
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("active")]
        public bool Active { get; set; } = default!;

        /// <summary>
        /// Date and time in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        public System.DateTimeOffset? CreatedAt { get; set; } = default!;

        /// <summary>
        /// First 3 letters of the associated API-key
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("apiKeyFirstLetters")]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? ApiKeyFirstLetters { get; set; } = default!;

        /// <summary>
        /// Date and time in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastUsedAt")]
        public System.DateTimeOffset? LastUsedAt { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static DBUserInfo FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<DBUserInfo>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserApiKey
    {
        /// <summary>
        /// The apikey
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("apikey")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Apikey { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static UserApiKey FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<UserApiKey>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Role
    {
        /// <summary>
        /// role name
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("permissions")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Permission> Permissions { get; set; } = new System.Collections.ObjectModel.Collection<Permission>();

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Role FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Role>(data, options);

        }

    }

    /// <summary>
    /// permissions attached to a role.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Permission
    {
        /// <summary>
        /// resources applicable for backup actions
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("backups")]
        public Backups? Backups { get; set; } = default!;

        /// <summary>
        /// resources applicable for data actions
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public Data? Data { get; set; } = default!;

        /// <summary>
        /// resources applicable for cluster actions
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("nodes")]
        public Nodes? Nodes { get; set; } = default!;

        /// <summary>
        /// resources applicable for user actions
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("users")]
        public Users? Users { get; set; } = default!;

        /// <summary>
        /// resources applicable for tenant actions
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tenants")]
        public Tenants? Tenants { get; set; } = default!;

        /// <summary>
        /// resources applicable for role actions
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("roles")]
        public Roles? Roles { get; set; } = default!;

        /// <summary>
        /// resources applicable for collection and/or tenant actions
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("collections")]
        public Collections? Collections { get; set; } = default!;

        /// <summary>
        /// allowed actions in weaviate.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("action")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public PermissionAction Action { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Permission FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Permission>(data, options);

        }

    }

    /// <summary>
    /// list of roles
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RolesListResponse : System.Collections.ObjectModel.Collection<Role>
    {

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static RolesListResponse FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<RolesListResponse>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Link
    {
        /// <summary>
        /// target of the link
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("href")]
        public string? Href { get; set; } = default!;

        /// <summary>
        /// relationship if both resources are related, e.g. 'next', 'previous', 'parent', etc.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("rel")]
        public string? Rel { get; set; } = default!;

        /// <summary>
        /// human readable name of the resource group
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// weaviate documentation about this resource group
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("documentationHref")]
        public string? DocumentationHref { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Link FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Link>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Principal
    {
        /// <summary>
        /// The username that was extracted either from the authentication information
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("username")]
        public string? Username { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("groups")]
        public System.Collections.Generic.ICollection<string>? Groups { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("userType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public UserTypeInput? UserType { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Principal FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Principal>(data, options);

        }

    }

    /// <summary>
    /// An array of available words and contexts.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class C11yWordsResponse
    {
        /// <summary>
        /// Weighted results for all words
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("concatenatedWord")]
        public ConcatenatedWord? ConcatenatedWord { get; set; } = default!;

        /// <summary>
        /// Weighted results for per individual word
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("individualWords")]
        public System.Collections.Generic.ICollection<IndividualWords>? IndividualWords { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static C11yWordsResponse FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<C11yWordsResponse>(data, options);

        }

    }

    /// <summary>
    /// A resource describing an extension to the contextinoary, containing both the identifier and the definition of the extension
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class C11yExtension
    {
        /// <summary>
        /// The new concept you want to extend. Must be an all-lowercase single word, or a space delimited compound word. Examples: 'foobarium', 'my custom concept'
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("concept")]
        public string? Concept { get; set; } = default!;

        /// <summary>
        /// A list of space-delimited words or a sentence describing what the custom concept is about. Avoid using the custom concept itself. An Example definition for the custom concept 'foobarium': would be 'a naturally occurring element which can only be seen by programmers'
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("definition")]
        public string? Definition { get; set; } = default!;

        /// <summary>
        /// Weight of the definition of the new concept where 1='override existing definition entirely' and 0='ignore custom definition'. Note that if the custom concept is not present in the contextionary yet, the weight cannot be less than 1.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("weight")]
        public float? Weight { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static C11yExtension FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<C11yExtension>(data, options);

        }

    }

    /// <summary>
    /// C11y function to show the nearest neighbors to a word.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class C11yNearestNeighbors : System.Collections.ObjectModel.Collection<Anonymous3>
    {

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static C11yNearestNeighbors FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<C11yNearestNeighbors>(data, options);

        }

    }

    /// <summary>
    /// A vector representation of the object in the Contextionary. If provided at object creation, this wil take precedence over any vectorizer setting.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class C11yVector : System.Collections.ObjectModel.Collection<float>
    {

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static C11yVector FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<C11yVector>(data, options);

        }

    }

    /// <summary>
    /// A map of named vectors for multi-vector representations.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Vectors : System.Collections.Generic.Dictionary<string, dynamic>
    {

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Vectors FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Vectors>(data, options);

        }

    }

    /// <summary>
    /// Receive question based on array of classes, properties and values.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class C11yVectorBasedQuestion : System.Collections.ObjectModel.Collection<Anonymous4>
    {

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static C11yVectorBasedQuestion FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<C11yVectorBasedQuestion>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Deprecation
    {
        /// <summary>
        /// The id that uniquely identifies this particular deprecations (mostly used internally)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// Whether the problematic API functionality is deprecated (planned to be removed) or already removed
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        /// <summary>
        /// Describes which API is effected, usually one of: REST, GraphQL
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("apiType")]
        public string? ApiType { get; set; } = default!;

        /// <summary>
        /// What this deprecation is about
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("msg")]
        public string? Msg { get; set; } = default!;

        /// <summary>
        /// User-required object to not be affected by the (planned) removal
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mitigation")]
        public string? Mitigation { get; set; } = default!;

        /// <summary>
        /// The deprecation was introduced in this version
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("sinceVersion")]
        public string? SinceVersion { get; set; } = default!;

        /// <summary>
        /// A best-effort guess of which upcoming version will remove the feature entirely
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("plannedRemovalVersion")]
        public string? PlannedRemovalVersion { get; set; } = default!;

        /// <summary>
        /// If the feature has already been removed, it was removed in this version
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("removedIn")]
        public string? RemovedIn { get; set; } = default!;

        /// <summary>
        /// If the feature has already been removed, it was removed at this timestamp
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("removedTime")]
        public System.DateTimeOffset? RemovedTime { get; set; } = default!;

        /// <summary>
        /// The deprecation was introduced in this version
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("sinceTime")]
        public System.DateTimeOffset? SinceTime { get; set; } = default!;

        /// <summary>
        /// The locations within the specified API affected by this deprecation
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("locations")]
        public System.Collections.Generic.ICollection<string>? Locations { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Deprecation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Deprecation>(data, options);

        }

    }

    /// <summary>
    /// An error response given by Weaviate end-points.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public System.Collections.Generic.ICollection<Error>? Error { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ErrorResponse FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ErrorResponse>(data, options);

        }

    }

    /// <summary>
    /// An error response caused by a GraphQL query.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GraphQLError
    {

        [System.Text.Json.Serialization.JsonPropertyName("locations")]
        public System.Collections.Generic.ICollection<Locations>? Locations { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("path")]
        public System.Collections.Generic.ICollection<string>? Path { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GraphQLError FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<GraphQLError>(data, options);

        }

    }

    /// <summary>
    /// GraphQL query based on: http://facebook.github.io/graphql/.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GraphQLQuery
    {
        /// <summary>
        /// The name of the operation if multiple exist in the query.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("operationName")]
        public string? OperationName { get; set; } = default!;

        /// <summary>
        /// Query based on GraphQL syntax.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("query")]
        public string? Query { get; set; } = default!;

        /// <summary>
        /// Additional variables for the query.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("variables")]
        public dynamic? Variables { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GraphQLQuery FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<GraphQLQuery>(data, options);

        }

    }

    /// <summary>
    /// A list of GraphQL queries.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GraphQLQueries : System.Collections.ObjectModel.Collection<GraphQLQuery>
    {

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GraphQLQueries FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<GraphQLQueries>(data, options);

        }

    }

    /// <summary>
    /// GraphQL based response: http://facebook.github.io/graphql/.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GraphQLResponse
    {
        /// <summary>
        /// GraphQL data object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public System.Collections.Generic.IDictionary<string, dynamic>? Data { get; set; } = default!;

        /// <summary>
        /// Array with errors.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("errors")]
        public System.Collections.Generic.ICollection<GraphQLError>? Errors { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GraphQLResponse FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<GraphQLResponse>(data, options);

        }

    }

    /// <summary>
    /// A list of GraphQL responses.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GraphQLResponses : System.Collections.ObjectModel.Collection<GraphQLResponse>
    {

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GraphQLResponses FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<GraphQLResponses>(data, options);

        }

    }

    /// <summary>
    /// Configure the inverted index built into Weaviate (default: 60).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InvertedIndexConfig
    {
        /// <summary>
        /// Asynchronous index clean up happens every n seconds
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cleanupIntervalSeconds")]
        public double? CleanupIntervalSeconds { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bm25")]
        public BM25Config? Bm25 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("stopwords")]
        public StopwordConfig? Stopwords { get; set; } = default!;

        /// <summary>
        /// Index each object by its internal timestamps (default: 'false').
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("indexTimestamps")]
        public bool? IndexTimestamps { get; set; } = default!;

        /// <summary>
        /// Index each object with the null state (default: 'false').
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("indexNullState")]
        public bool? IndexNullState { get; set; } = default!;

        /// <summary>
        /// Index length of properties (default: 'false').
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("indexPropertyLength")]
        public bool? IndexPropertyLength { get; set; } = default!;

        /// <summary>
        /// Using BlockMax WAND for query execution (default: 'false', will be 'true' for new collections created after 1.30).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("usingBlockMaxWAND")]
        public bool? UsingBlockMaxWAND { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static InvertedIndexConfig FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<InvertedIndexConfig>(data, options);

        }

    }

    /// <summary>
    /// Configure how replication is executed in a cluster
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReplicationConfig
    {
        /// <summary>
        /// Number of times a class is replicated (default: 1).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("factor")]
        public int? Factor { get; set; } = default!;

        /// <summary>
        /// Enable asynchronous replication (default: false).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asyncEnabled")]
        public bool? AsyncEnabled { get; set; } = default!;

        /// <summary>
        /// Conflict resolution strategy for deleted objects.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deletionStrategy")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ReplicationConfigDeletionStrategy? DeletionStrategy { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ReplicationConfig FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ReplicationConfig>(data, options);

        }

    }

    /// <summary>
    /// tuning parameters for the BM25 algorithm
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BM25Config
    {
        /// <summary>
        /// Calibrates term-weight scaling based on the term frequency within a document (default: 1.2).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("k1")]
        public float? K1 { get; set; } = default!;

        /// <summary>
        /// Calibrates term-weight scaling based on the document length (default: 0.75).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("b")]
        public float? B { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static BM25Config FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<BM25Config>(data, options);

        }

    }

    /// <summary>
    /// fine-grained control over stopword list usage
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StopwordConfig
    {
        /// <summary>
        /// Pre-existing list of common words by language (default: 'en'). Options: ['en', 'none'].
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("preset")]
        public string? Preset { get; set; } = default!;

        /// <summary>
        /// Stopwords to be considered additionally (default: []). Can be any array of custom strings.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("additions")]
        public System.Collections.Generic.ICollection<string>? Additions { get; set; } = default!;

        /// <summary>
        /// Stopwords to be removed from consideration (default: []). Can be any array of custom strings.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("removals")]
        public System.Collections.Generic.ICollection<string>? Removals { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static StopwordConfig FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<StopwordConfig>(data, options);

        }

    }

    /// <summary>
    /// Configuration related to multi-tenancy within a class
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MultiTenancyConfig
    {
        /// <summary>
        /// Whether or not multi-tenancy is enabled for this class (default: false).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("enabled")]
        public bool? Enabled { get; set; } = default!;

        /// <summary>
        /// Nonexistent tenants should (not) be created implicitly (default: false).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("autoTenantCreation")]
        public bool? AutoTenantCreation { get; set; } = default!;

        /// <summary>
        /// Existing tenants should (not) be turned HOT implicitly when they are accessed and in another activity status (default: false).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("autoTenantActivation")]
        public bool? AutoTenantActivation { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static MultiTenancyConfig FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<MultiTenancyConfig>(data, options);

        }

    }

    /// <summary>
    /// Contains meta information of the current Weaviate instance.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Meta
    {
        /// <summary>
        /// The url of the host.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("hostname")]
        public string? Hostname { get; set; } = default!;

        /// <summary>
        /// The Weaviate server version.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public string? Version { get; set; } = default!;

        /// <summary>
        /// Module-specific meta information.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("modules")]
        public dynamic? Modules { get; set; } = default!;

        /// <summary>
        /// Max message size for GRPC connection in bytes.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("grpcMaxMessageSize")]
        public int? GrpcMaxMessageSize { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Meta FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Meta>(data, options);

        }

    }

    /// <summary>
    /// Multiple instances of references to other objects.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MultipleRef : System.Collections.ObjectModel.Collection<SingleRef>
    {

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static MultipleRef FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<MultipleRef>(data, options);

        }

    }

    /// <summary>
    /// Either a JSONPatch document as defined by RFC 6902 (from, op, path, value), or a merge document (RFC 7396).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatchDocumentObject
    {
        /// <summary>
        /// A string containing a JSON Pointer value.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("from")]
        public string? From { get; set; } = default!;

        /// <summary>
        /// The operation to be performed.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("op")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public PatchDocumentObjectOp Op { get; set; } = default!;

        /// <summary>
        /// A JSON-Pointer.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("path")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Path { get; set; } = default!;

        /// <summary>
        /// The value to be used within the operations.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public dynamic? Value { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("merge")]
        public Object? Merge { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PatchDocumentObject FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<PatchDocumentObject>(data, options);

        }

    }

    /// <summary>
    /// Either a JSONPatch document as defined by RFC 6902 (from, op, path, value), or a merge document (RFC 7396).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatchDocumentAction
    {
        /// <summary>
        /// A string containing a JSON Pointer value.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("from")]
        public string? From { get; set; } = default!;

        /// <summary>
        /// The operation to be performed.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("op")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public PatchDocumentActionOp Op { get; set; } = default!;

        /// <summary>
        /// A JSON-Pointer.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("path")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Path { get; set; } = default!;

        /// <summary>
        /// The value to be used within the operations.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public dynamic? Value { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("merge")]
        public Object? Merge { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PatchDocumentAction FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<PatchDocumentAction>(data, options);

        }

    }

    /// <summary>
    /// Request body to add a replica of given shard of a given collection
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReplicationReplicateReplicaRequest
    {
        /// <summary>
        /// The node containing the replica
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("sourceNodeName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SourceNodeName { get; set; } = default!;

        /// <summary>
        /// The node to add a copy of the replica on
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("destinationNodeName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DestinationNodeName { get; set; } = default!;

        /// <summary>
        /// The collection name holding the shard
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("collectionId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CollectionId { get; set; } = default!;

        /// <summary>
        /// The shard id holding the replica to be copied
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("shardId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ShardId { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ReplicationReplicateReplicaRequest FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ReplicationReplicateReplicaRequest>(data, options);

        }

    }

    /// <summary>
    /// The OK response of POST /replication/replicate
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReplicationReplicateReplicaResponse
    {
        /// <summary>
        /// The unique id of the replication operation.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Id { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ReplicationReplicateReplicaResponse FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ReplicationReplicateReplicaResponse>(data, options);

        }

    }

    /// <summary>
    /// Request body to disable (soft-delete) a replica of given shard of a given collection
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReplicationDisableReplicaRequest
    {
        /// <summary>
        /// The node containing the replica to be disabled
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("nodeName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NodeName { get; set; } = default!;

        /// <summary>
        /// The collection name holding the replica to be disabled
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("collectionId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CollectionId { get; set; } = default!;

        /// <summary>
        /// The shard id holding the replica to be disabled
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("shardId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ShardId { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ReplicationDisableReplicaRequest FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ReplicationDisableReplicaRequest>(data, options);

        }

    }

    /// <summary>
    /// Request body to delete a replica of given shard of a given collection
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReplicationDeleteReplicaRequest
    {
        /// <summary>
        /// The node containing the replica to be deleted
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("nodeName")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NodeName { get; set; } = default!;

        /// <summary>
        /// The collection name holding the replica to be delete
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("collectionId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CollectionId { get; set; } = default!;

        /// <summary>
        /// The shard id holding the replica to be deleted
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("shardId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ShardId { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ReplicationDeleteReplicaRequest FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ReplicationDeleteReplicaRequest>(data, options);

        }

    }

    /// <summary>
    /// The status of a replication operation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReplicationReplicateDetailsReplicaStatus
    {

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ReplicationReplicateDetailsReplicaStatusState? State { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("errors")]
        public System.Collections.Generic.ICollection<string>? Errors { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ReplicationReplicateDetailsReplicaStatus FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ReplicationReplicateDetailsReplicaStatus>(data, options);

        }

    }

    /// <summary>
    /// The current status and details of a replication operation, including information about the resources involved in the replication process.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReplicationReplicateDetailsReplicaResponse
    {
        /// <summary>
        /// The unique id of the replication operation.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Id { get; set; } = default!;

        /// <summary>
        /// The id of the shard to collect replication details for.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("shardId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ShardId { get; set; } = default!;

        /// <summary>
        /// The name of the collection holding data being replicated.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("collection")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Collection { get; set; } = default!;

        /// <summary>
        /// The id of the node where the source replica is allocated.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("sourceNodeId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SourceNodeId { get; set; } = default!;

        /// <summary>
        /// The id of the node where the target replica is allocated.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("targetNodeId")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TargetNodeId { get; set; } = default!;

        /// <summary>
        /// The current status of the replication operation
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required]
        public ReplicationReplicateDetailsReplicaStatus Status { get; set; } = new ReplicationReplicateDetailsReplicaStatus();

        /// <summary>
        /// The history of the replication operation
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("statusHistory")]
        public System.Collections.Generic.ICollection<ReplicationReplicateDetailsReplicaStatus>? StatusHistory { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ReplicationReplicateDetailsReplicaResponse FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ReplicationReplicateDetailsReplicaResponse>(data, options);

        }

    }

    /// <summary>
    /// A single peer in the network.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PeerUpdate
    {
        /// <summary>
        /// The session ID of the peer.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        /// <summary>
        /// Human readable name.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// The location where the peer is exposed to the internet.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("uri")]
        public System.Uri? Uri { get; set; } = default!;

        /// <summary>
        /// The latest known hash of the peer's schema.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("schemaHash")]
        public string? SchemaHash { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PeerUpdate FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<PeerUpdate>(data, options);

        }

    }

    /// <summary>
    /// List of known peers.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PeerUpdateList : System.Collections.ObjectModel.Collection<PeerUpdate>
    {

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PeerUpdateList FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<PeerUpdateList>(data, options);

        }

    }

    /// <summary>
    /// Definitions of semantic schemas (also see: https://github.com/weaviate/weaviate-semantic-schemas).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Schema
    {
        /// <summary>
        /// Semantic classes that are available.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("classes")]
        public System.Collections.Generic.ICollection<Class>? Classes { get; set; } = default!;

        /// <summary>
        /// Email of the maintainer.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("maintainer")]
        public string? Maintainer { get; set; } = default!;

        /// <summary>
        /// Name of the schema.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Schema FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Schema>(data, options);

        }

    }

    /// <summary>
    /// Indicates the health of the schema in a cluster.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SchemaClusterStatus
    {
        /// <summary>
        /// True if the cluster is in sync, false if there is an issue (see error).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("healthy")]
        public bool? Healthy { get; set; } = default!;

        /// <summary>
        /// Contains the sync check error if one occurred
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public string? Error { get; set; } = default!;

        /// <summary>
        /// Hostname of the coordinating node, i.e. the one that received the cluster. This can be useful information if the error message contains phrases such as 'other nodes agree, but local does not', etc.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("hostname")]
        public string? Hostname { get; set; } = default!;

        /// <summary>
        /// Number of nodes that participated in the sync check
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("nodeCount")]
        public double? NodeCount { get; set; } = default!;

        /// <summary>
        /// The cluster check at startup can be ignored (to recover from an out-of-sync situation).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ignoreSchemaSync")]
        public bool? IgnoreSchemaSync { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static SchemaClusterStatus FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<SchemaClusterStatus>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Class
    {
        /// <summary>
        /// Name of the class (a.k.a. 'collection') (required). Multiple words should be concatenated in CamelCase, e.g. `ArticleAuthor`.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("class")]
        public string? Class1 { get; set; } = default!;

        /// <summary>
        /// Configure named vectors. Either use this field or `vectorizer`, `vectorIndexType`, and `vectorIndexConfig` fields. Available from `v1.24.0`.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("vectorConfig")]
        public System.Collections.Generic.IDictionary<string, VectorConfig>? VectorConfig { get; set; } = default!;

        /// <summary>
        /// Name of the vector index to use, eg. (HNSW)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("vectorIndexType")]
        public string? VectorIndexType { get; set; } = default!;

        /// <summary>
        /// Vector-index config, that is specific to the type of index selected in vectorIndexType
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("vectorIndexConfig")]
        public dynamic? VectorIndexConfig { get; set; } = default!;

        /// <summary>
        /// Manage how the index should be sharded and distributed in the cluster
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("shardingConfig")]
        public dynamic? ShardingConfig { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("replicationConfig")]
        public ReplicationConfig? ReplicationConfig { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("invertedIndexConfig")]
        public InvertedIndexConfig? InvertedIndexConfig { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("multiTenancyConfig")]
        public MultiTenancyConfig? MultiTenancyConfig { get; set; } = default!;

        /// <summary>
        /// Specify how the vectors for this class should be determined. The options are either 'none' - this means you have to import a vector with each object yourself - or the name of a module that provides vectorization capabilities, such as 'text2vec-contextionary'. If left empty, it will use the globally configured default which can itself either be 'none' or a specific module.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("vectorizer")]
        public string? Vectorizer { get; set; } = default!;

        /// <summary>
        /// Configuration specific to modules in a collection context.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("moduleConfig")]
        public dynamic? ModuleConfig { get; set; } = default!;

        /// <summary>
        /// Description of the collection for metadata purposes.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// Define properties of the collection.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("properties")]
        public System.Collections.Generic.ICollection<Property>? Properties { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Class FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Class>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Property
    {
        /// <summary>
        /// Data type of the property (required). If it starts with a capital (for example Person), may be a reference to another type.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("dataType")]
        public System.Collections.Generic.ICollection<string>? DataType { get; set; } = default!;

        /// <summary>
        /// Description of the property.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// Configuration specific to modules this Weaviate instance has installed
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("moduleConfig")]
        public dynamic? ModuleConfig { get; set; } = default!;

        /// <summary>
        /// The name of the property (required). Multiple words should be concatenated in camelCase, e.g. `nameOfAuthor`.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// (Deprecated). Whether to include this property in the inverted index. If `false`, this property cannot be used in `where` filters, `bm25` or `hybrid` search. &lt;br/&gt;&lt;br/&gt;Unrelated to vectorization behavior (deprecated as of v1.19; use indexFilterable or/and indexSearchable instead)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("indexInverted")]
        public bool? IndexInverted { get; set; } = default!;

        /// <summary>
        /// Whether to include this property in the filterable, Roaring Bitmap index. If `false`, this property cannot be used in `where` filters. &lt;br/&gt;&lt;br/&gt;Note: Unrelated to vectorization behavior.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("indexFilterable")]
        public bool? IndexFilterable { get; set; } = default!;

        /// <summary>
        /// Optional. Should this property be indexed in the inverted index. Defaults to true. Applicable only to properties of data type text and text[]. If you choose false, you will not be able to use this property in bm25 or hybrid search. This property has no affect on vectorization decisions done by modules
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("indexSearchable")]
        public bool? IndexSearchable { get; set; } = default!;

        /// <summary>
        /// Whether to include this property in the filterable, range-based Roaring Bitmap index. Provides better performance for range queries compared to filterable index in large datasets. Applicable only to properties of data type int, number, date.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("indexRangeFilters")]
        public bool? IndexRangeFilters { get; set; } = default!;

        /// <summary>
        /// Determines tokenization of the property as separate words or whole field. Optional. Applies to text and text[] data types. Allowed values are `word` (default; splits on any non-alphanumerical, lowercases), `lowercase` (splits on white spaces, lowercases), `whitespace` (splits on white spaces), `field` (trims). Not supported for remaining data types
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tokenization")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public PropertyTokenization? Tokenization { get; set; } = default!;

        /// <summary>
        /// The properties of the nested object(s). Applies to object and object[] data types.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("nestedProperties")]
        public System.Collections.Generic.ICollection<NestedProperty>? NestedProperties { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Property FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Property>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VectorConfig
    {
        /// <summary>
        /// Configuration of a specific vectorizer used by this vector
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("vectorizer")]
        public dynamic? Vectorizer { get; set; } = default!;

        /// <summary>
        /// Name of the vector index to use, eg. (HNSW)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("vectorIndexType")]
        public string? VectorIndexType { get; set; } = default!;

        /// <summary>
        /// Vector-index config, that is specific to the type of index selected in vectorIndexType
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("vectorIndexConfig")]
        public dynamic? VectorIndexConfig { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static VectorConfig FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<VectorConfig>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NestedProperty
    {

        [System.Text.Json.Serialization.JsonPropertyName("dataType")]
        public System.Collections.Generic.ICollection<string>? DataType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("indexFilterable")]
        public bool? IndexFilterable { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("indexSearchable")]
        public bool? IndexSearchable { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("indexRangeFilters")]
        public bool? IndexRangeFilters { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("tokenization")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public NestedPropertyTokenization? Tokenization { get; set; } = default!;

        /// <summary>
        /// The properties of the nested object(s). Applies to object and object[] data types.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("nestedProperties")]
        public System.Collections.Generic.ICollection<NestedProperty>? NestedProperties { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static NestedProperty FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<NestedProperty>(data, options);

        }

    }

    /// <summary>
    /// The status of all the shards of a Class
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShardStatusList : System.Collections.ObjectModel.Collection<ShardStatusGetResponse>
    {

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ShardStatusList FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ShardStatusList>(data, options);

        }

    }

    /// <summary>
    /// Response body of shard status get request
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShardStatusGetResponse
    {
        /// <summary>
        /// Name of the shard
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// Status of the shard
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        /// <summary>
        /// Size of the vector queue of the shard
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("vectorQueueSize")]
        public int? VectorQueueSize { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ShardStatusGetResponse FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ShardStatusGetResponse>(data, options);

        }

    }

    /// <summary>
    /// The status of a single shard
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShardStatus
    {
        /// <summary>
        /// Status of the shard
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ShardStatus FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ShardStatus>(data, options);

        }

    }

    /// <summary>
    /// The definition of a backup create metadata
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BackupCreateStatusResponse
    {
        /// <summary>
        /// The ID of the backup. Must be URL-safe and work as a filesystem path, only lowercase, numbers, underscore, minus characters allowed.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// Backup backend name e.g. filesystem, gcs, s3.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("backend")]
        public string? Backend { get; set; } = default!;

        /// <summary>
        /// destination path of backup files proper to selected backend
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("path")]
        public string? Path { get; set; } = default!;

        /// <summary>
        /// error message if creation failed
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public string? Error { get; set; } = default!;

        /// <summary>
        /// phase of backup creation process
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public BackupCreateStatusResponseStatus? Status { get; set; } = Weaviate.Client.Rest.Dto.BackupCreateStatusResponseStatus.STARTED;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static BackupCreateStatusResponse FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<BackupCreateStatusResponse>(data, options);

        }

    }

    /// <summary>
    /// The definition of a backup restore metadata
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BackupRestoreStatusResponse
    {
        /// <summary>
        /// The ID of the backup. Must be URL-safe and work as a filesystem path, only lowercase, numbers, underscore, minus characters allowed.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// Backup backend name e.g. filesystem, gcs, s3.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("backend")]
        public string? Backend { get; set; } = default!;

        /// <summary>
        /// destination path of backup files proper to selected backup backend, contains bucket and path
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("path")]
        public string? Path { get; set; } = default!;

        /// <summary>
        /// error message if restoration failed
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public string? Error { get; set; } = default!;

        /// <summary>
        /// phase of backup restoration process
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public BackupRestoreStatusResponseStatus? Status { get; set; } = Weaviate.Client.Rest.Dto.BackupRestoreStatusResponseStatus.STARTED;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static BackupRestoreStatusResponse FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<BackupRestoreStatusResponse>(data, options);

        }

    }

    /// <summary>
    /// Backup custom configuration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BackupConfig
    {
        /// <summary>
        /// name of the endpoint, e.g. s3.amazonaws.com
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("Endpoint")]
        public string? Endpoint { get; set; } = default!;

        /// <summary>
        /// Name of the bucket, container, volume, etc
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("Bucket")]
        public string? Bucket { get; set; } = default!;

        /// <summary>
        /// Path or key within the bucket
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("Path")]
        public string? Path { get; set; } = default!;

        /// <summary>
        /// Desired CPU core utilization ranging from 1%-80%
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("CPUPercentage")]
        [System.ComponentModel.DataAnnotations.Range(1, 80)]
        public int? CPUPercentage { get; set; } = 50;

        /// <summary>
        /// Aimed chunk size, with a minimum of 2MB, default of 128MB, and a maximum of 512MB. The actual chunk size may vary.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ChunkSize")]
        [System.ComponentModel.DataAnnotations.Range(2, 512)]
        public int? ChunkSize { get; set; } = 128;

        /// <summary>
        /// compression level used by compression algorithm
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("CompressionLevel")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public BackupConfigCompressionLevel? CompressionLevel { get; set; } = Weaviate.Client.Rest.Dto.BackupConfigCompressionLevel.DefaultCompression;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static BackupConfig FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<BackupConfig>(data, options);

        }

    }

    /// <summary>
    /// Backup custom configuration
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RestoreConfig
    {
        /// <summary>
        /// name of the endpoint, e.g. s3.amazonaws.com
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("Endpoint")]
        public string? Endpoint { get; set; } = default!;

        /// <summary>
        /// Name of the bucket, container, volume, etc
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("Bucket")]
        public string? Bucket { get; set; } = default!;

        /// <summary>
        /// Path within the bucket
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("Path")]
        public string? Path { get; set; } = default!;

        /// <summary>
        /// Desired CPU core utilization ranging from 1%-80%
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("CPUPercentage")]
        [System.ComponentModel.DataAnnotations.Range(1, 80)]
        public int? CPUPercentage { get; set; } = 50;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static RestoreConfig FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<RestoreConfig>(data, options);

        }

    }

    /// <summary>
    /// Request body for creating a backup of a set of classes
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BackupCreateRequest
    {
        /// <summary>
        /// The ID of the backup (required). Must be URL-safe and work as a filesystem path, only lowercase, numbers, underscore, minus characters allowed.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// Custom configuration for the backup creation process
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("config")]
        public BackupConfig? Config { get; set; } = default!;

        /// <summary>
        /// List of collections to include in the backup creation process. If not set, all collections are included. Cannot be used together with `exclude`.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("include")]
        public System.Collections.Generic.ICollection<string>? Include { get; set; } = default!;

        /// <summary>
        /// List of collections to exclude from the backup creation process. If not set, all collections are included. Cannot be used together with `include`.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("exclude")]
        public System.Collections.Generic.ICollection<string>? Exclude { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static BackupCreateRequest FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<BackupCreateRequest>(data, options);

        }

    }

    /// <summary>
    /// The definition of a backup create response body
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BackupCreateResponse
    {
        /// <summary>
        /// The ID of the backup. Must be URL-safe and work as a filesystem path, only lowercase, numbers, underscore, minus characters allowed.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// The list of classes for which the backup creation process was started
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("classes")]
        public System.Collections.Generic.ICollection<string>? Classes { get; set; } = default!;

        /// <summary>
        /// Backup backend name e.g. filesystem, gcs, s3.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("backend")]
        public string? Backend { get; set; } = default!;

        /// <summary>
        /// Name of the bucket, container, volume, etc
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bucket")]
        public string? Bucket { get; set; } = default!;

        /// <summary>
        /// Path within bucket of backup
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("path")]
        public string? Path { get; set; } = default!;

        /// <summary>
        /// error message if creation failed
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public string? Error { get; set; } = default!;

        /// <summary>
        /// phase of backup creation process
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public BackupCreateResponseStatus? Status { get; set; } = Weaviate.Client.Rest.Dto.BackupCreateResponseStatus.STARTED;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static BackupCreateResponse FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<BackupCreateResponse>(data, options);

        }

    }

    /// <summary>
    /// The definition of a backup create response body
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BackupListResponse : System.Collections.ObjectModel.Collection<Anonymous2>
    {

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static BackupListResponse FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<BackupListResponse>(data, options);

        }

    }

    /// <summary>
    /// Request body for restoring a backup for a set of classes
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BackupRestoreRequest
    {
        /// <summary>
        /// Custom configuration for the backup restoration process
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("config")]
        public RestoreConfig? Config { get; set; } = default!;

        /// <summary>
        /// List of classes to include in the backup restoration process
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("include")]
        public System.Collections.Generic.ICollection<string>? Include { get; set; } = default!;

        /// <summary>
        /// List of classes to exclude from the backup restoration process
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("exclude")]
        public System.Collections.Generic.ICollection<string>? Exclude { get; set; } = default!;

        /// <summary>
        /// Allows overriding the node names stored in the backup with different ones. Useful when restoring backups to a different environment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("node_mapping")]
        public System.Collections.Generic.IDictionary<string, string>? Node_mapping { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static BackupRestoreRequest FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<BackupRestoreRequest>(data, options);

        }

    }

    /// <summary>
    /// The definition of a backup restore response body
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BackupRestoreResponse
    {
        /// <summary>
        /// The ID of the backup. Must be URL-safe and work as a filesystem path, only lowercase, numbers, underscore, minus characters allowed.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// The list of classes for which the backup restoration process was started
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("classes")]
        public System.Collections.Generic.ICollection<string>? Classes { get; set; } = default!;

        /// <summary>
        /// Backup backend name e.g. filesystem, gcs, s3.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("backend")]
        public string? Backend { get; set; } = default!;

        /// <summary>
        /// destination path of backup files proper to selected backend
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("path")]
        public string? Path { get; set; } = default!;

        /// <summary>
        /// error message if restoration failed
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public string? Error { get; set; } = default!;

        /// <summary>
        /// phase of backup restoration process
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public BackupRestoreResponseStatus? Status { get; set; } = Weaviate.Client.Rest.Dto.BackupRestoreResponseStatus.STARTED;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static BackupRestoreResponse FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<BackupRestoreResponse>(data, options);

        }

    }

    /// <summary>
    /// The summary of Weaviate's statistics.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NodeStats
    {
        /// <summary>
        /// The count of Weaviate's shards. To see this value, set `output` to `verbose`.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("shardCount")]
        public double? ShardCount { get; set; } = default!;

        /// <summary>
        /// The total number of objects in DB.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("objectCount")]
        public double? ObjectCount { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static NodeStats FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<NodeStats>(data, options);

        }

    }

    /// <summary>
    /// The summary of a nodes batch queue congestion status.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BatchStats
    {
        /// <summary>
        /// How many objects are currently in the batch queue.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("queueLength")]
        public double? QueueLength { get; set; } = default!;

        /// <summary>
        /// How many objects are approximately processed from the batch queue per second.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ratePerSecond")]
        public double? RatePerSecond { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static BatchStats FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<BatchStats>(data, options);

        }

    }

    /// <summary>
    /// The definition of a node shard status response body
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NodeShardStatus
    {
        /// <summary>
        /// The name of the shard.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// The name of shard's class.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("class")]
        public string? Class { get; set; } = default!;

        /// <summary>
        /// The number of objects in shard.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("objectCount")]
        public double? ObjectCount { get; set; } = default!;

        /// <summary>
        /// The status of the vector indexing process.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("vectorIndexingStatus")]
        public dynamic? VectorIndexingStatus { get; set; } = default!;

        /// <summary>
        /// The status of vector compression/quantization.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("compressed")]
        public dynamic? Compressed { get; set; } = default!;

        /// <summary>
        /// The length of the vector indexing queue.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("vectorQueueLength")]
        public double? VectorQueueLength { get; set; } = default!;

        /// <summary>
        /// The load status of the shard.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("loaded")]
        public bool? Loaded { get; set; } = default!;

        /// <summary>
        /// The status of the async replication.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("asyncReplicationStatus")]
        public System.Collections.Generic.ICollection<AsyncReplicationStatus>? AsyncReplicationStatus { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static NodeShardStatus FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<NodeShardStatus>(data, options);

        }

    }

    /// <summary>
    /// The status of the async replication.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AsyncReplicationStatus
    {
        /// <summary>
        /// The number of objects propagated in the most recent iteration.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("objectsPropagated")]
        public double? ObjectsPropagated { get; set; } = default!;

        /// <summary>
        /// The start time of the most recent iteration.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("startDiffTimeUnixMillis")]
        public double? StartDiffTimeUnixMillis { get; set; } = default!;

        /// <summary>
        /// The target node of the replication, if set, otherwise empty.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("targetNode")]
        public string? TargetNode { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AsyncReplicationStatus FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<AsyncReplicationStatus>(data, options);

        }

    }

    /// <summary>
    /// The definition of a backup node status response body
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NodeStatus
    {
        /// <summary>
        /// The name of the node.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// Node's status.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public NodeStatusStatus? Status { get; set; } = Weaviate.Client.Rest.Dto.NodeStatusStatus.HEALTHY;

        /// <summary>
        /// The version of Weaviate.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public string? Version { get; set; } = default!;

        /// <summary>
        /// The gitHash of Weaviate.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("gitHash")]
        public string? GitHash { get; set; } = default!;

        /// <summary>
        /// Weaviate overall statistics.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("stats")]
        public NodeStats? Stats { get; set; } = default!;

        /// <summary>
        /// Weaviate batch statistics.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("batchStats")]
        public BatchStats? BatchStats { get; set; } = default!;

        /// <summary>
        /// The list of the shards with it's statistics.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("shards")]
        public System.Collections.Generic.ICollection<NodeShardStatus>? Shards { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static NodeStatus FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<NodeStatus>(data, options);

        }

    }

    /// <summary>
    /// The status of all of the Weaviate nodes
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NodesStatusResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("nodes")]
        public System.Collections.Generic.ICollection<NodeStatus>? Nodes { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static NodesStatusResponse FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<NodesStatusResponse>(data, options);

        }

    }

    /// <summary>
    /// Distributed task metadata.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DistributedTask
    {
        /// <summary>
        /// The ID of the task.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// The version of the task.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public int? Version { get; set; } = default!;

        /// <summary>
        /// The status of the task.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        /// <summary>
        /// The time when the task was created.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("startedAt")]
        public System.DateTimeOffset? StartedAt { get; set; } = default!;

        /// <summary>
        /// The time when the task was finished.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("finishedAt")]
        public System.DateTimeOffset? FinishedAt { get; set; } = default!;

        /// <summary>
        /// The nodes that finished the task.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("finishedNodes")]
        public System.Collections.Generic.ICollection<string>? FinishedNodes { get; set; } = default!;

        /// <summary>
        /// The high level reason why the task failed.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public string? Error { get; set; } = default!;

        /// <summary>
        /// The payload of the task.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("payload")]
        public dynamic? Payload { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static DistributedTask FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<DistributedTask>(data, options);

        }

    }

    /// <summary>
    /// Active distributed tasks by namespace.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DistributedTasks : System.Collections.Generic.Dictionary<string, System.Collections.ObjectModel.Collection<DistributedTask>>
    {

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static DistributedTasks FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<DistributedTasks>(data, options);

        }

    }

    /// <summary>
    /// The definition of Raft statistics.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RaftStatistics
    {

        [System.Text.Json.Serialization.JsonPropertyName("appliedIndex")]
        public string? AppliedIndex { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("commitIndex")]
        public string? CommitIndex { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fsmPending")]
        public string? FsmPending { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastContact")]
        public string? LastContact { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastLogIndex")]
        public string? LastLogIndex { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastLogTerm")]
        public string? LastLogTerm { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastSnapshotIndex")]
        public string? LastSnapshotIndex { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastSnapshotTerm")]
        public string? LastSnapshotTerm { get; set; } = default!;

        /// <summary>
        /// Weaviate Raft nodes.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("latestConfiguration")]
        public dynamic? LatestConfiguration { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("latestConfigurationIndex")]
        public string? LatestConfigurationIndex { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("numPeers")]
        public string? NumPeers { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("protocolVersion")]
        public string? ProtocolVersion { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("protocolVersionMax")]
        public string? ProtocolVersionMax { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("protocolVersionMin")]
        public string? ProtocolVersionMin { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("snapshotVersionMax")]
        public string? SnapshotVersionMax { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("snapshotVersionMin")]
        public string? SnapshotVersionMin { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        public string? State { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("term")]
        public string? Term { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static RaftStatistics FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<RaftStatistics>(data, options);

        }

    }

    /// <summary>
    /// The definition of node statistics.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Statistics
    {
        /// <summary>
        /// The name of the node.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// Node's status.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public StatisticsStatus? Status { get; set; } = Weaviate.Client.Rest.Dto.StatisticsStatus.HEALTHY;

        [System.Text.Json.Serialization.JsonPropertyName("bootstrapped")]
        public bool? Bootstrapped { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dbLoaded")]
        public bool? DbLoaded { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("initialLastAppliedIndex")]
        public double? InitialLastAppliedIndex { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastAppliedIndex")]
        public double? LastAppliedIndex { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isVoter")]
        public bool? IsVoter { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("leaderId")]
        public dynamic? LeaderId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("leaderAddress")]
        public dynamic? LeaderAddress { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("open")]
        public bool? Open { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ready")]
        public bool? Ready { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("candidates")]
        public dynamic? Candidates { get; set; } = default!;

        /// <summary>
        /// Weaviate Raft statistics.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("raft")]
        public RaftStatistics? Raft { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Statistics FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Statistics>(data, options);

        }

    }

    /// <summary>
    /// The cluster statistics of all of the Weaviate nodes
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ClusterStatisticsResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("statistics")]
        public System.Collections.Generic.ICollection<Statistics>? Statistics { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("synchronized")]
        public bool? Synchronized { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ClusterStatisticsResponse FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ClusterStatisticsResponse>(data, options);

        }

    }

    /// <summary>
    /// Either set beacon (direct reference) or set class and schema (concept reference)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SingleRef
    {
        /// <summary>
        /// If using a concept reference (rather than a direct reference), specify the desired class name here
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("class")]
        public System.Uri? Class { get; set; } = default!;

        /// <summary>
        /// If using a concept reference (rather than a direct reference), specify the desired properties here
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("schema")]
        public dynamic? Schema { get; set; } = default!;

        /// <summary>
        /// If using a direct reference, specify the URI to point to the cross-ref here. Should be in the form of weaviate://localhost/&lt;uuid&gt; for the example of a local cross-ref to an object
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("beacon")]
        public System.Uri? Beacon { get; set; } = default!;

        /// <summary>
        /// If using a direct reference, this read-only fields provides a link to the referenced resource. If 'origin' is globally configured, an absolute URI is shown - a relative URI otherwise.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("href")]
        public System.Uri? Href { get; set; } = default!;

        /// <summary>
        /// Additional Meta information about classifications if the item was part of one
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("classification")]
        public ReferenceMetaClassification? Classification { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static SingleRef FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<SingleRef>(data, options);

        }

    }

    /// <summary>
    /// (Response only) Additional meta information about a single object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalProperties : System.Collections.Generic.Dictionary<string, dynamic>
    {

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AdditionalProperties FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<AdditionalProperties>(data, options);

        }

    }

    /// <summary>
    /// This meta field contains additional info about the classified reference property
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReferenceMetaClassification
    {
        /// <summary>
        /// overall neighbors checked as part of the classification. In most cases this will equal k, but could be lower than k - for example if not enough data was present
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("overallCount")]
        public double? OverallCount { get; set; } = default!;

        /// <summary>
        /// size of the winning group, a number between 1..k
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("winningCount")]
        public double? WinningCount { get; set; } = default!;

        /// <summary>
        /// size of the losing group, can be 0 if the winning group size equals k
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("losingCount")]
        public double? LosingCount { get; set; } = default!;

        /// <summary>
        /// The lowest distance of any neighbor, regardless of whether they were in the winning or losing group
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("closestOverallDistance")]
        public double? ClosestOverallDistance { get; set; } = default!;

        /// <summary>
        /// deprecated - do not use, to be removed in 0.23.0
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("winningDistance")]
        public double? WinningDistance { get; set; } = default!;

        /// <summary>
        /// Mean distance of all neighbors from the winning group
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("meanWinningDistance")]
        public double? MeanWinningDistance { get; set; } = default!;

        /// <summary>
        /// Closest distance of a neighbor from the winning group
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("closestWinningDistance")]
        public double? ClosestWinningDistance { get; set; } = default!;

        /// <summary>
        /// The lowest distance of a neighbor in the losing group. Optional. If k equals the size of the winning group, there is no losing group
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("closestLosingDistance")]
        public double? ClosestLosingDistance { get; set; } = default!;

        /// <summary>
        /// deprecated - do not use, to be removed in 0.23.0
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("losingDistance")]
        public double? LosingDistance { get; set; } = default!;

        /// <summary>
        /// Mean distance of all neighbors from the losing group. Optional. If k equals the size of the winning group, there is no losing group.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("meanLosingDistance")]
        public double? MeanLosingDistance { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ReferenceMetaClassification FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ReferenceMetaClassification>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BatchReference
    {
        /// <summary>
        /// Long-form beacon-style URI to identify the source of the cross-ref including the property name. Should be in the form of weaviate://localhost/&lt;kinds&gt;/&lt;uuid&gt;/&lt;className&gt;/&lt;propertyName&gt;, where &lt;kinds&gt; must be one of 'objects', 'objects' and &lt;className&gt; and &lt;propertyName&gt; must represent the cross-ref property of source class to be used.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("from")]
        public System.Uri? From { get; set; } = default!;

        /// <summary>
        /// Short-form URI to point to the cross-ref. Should be in the form of weaviate://localhost/&lt;uuid&gt; for the example of a local cross-ref to an object
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("to")]
        public System.Uri? To { get; set; } = default!;

        /// <summary>
        /// Name of the reference tenant.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tenant")]
        public string? Tenant { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static BatchReference FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<BatchReference>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BatchReferenceResponse : BatchReference
    {
        /// <summary>
        /// Results for this specific reference.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("result")]
        public Result? Result { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static BatchReferenceResponse FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<BatchReferenceResponse>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GeoCoordinates
    {
        /// <summary>
        /// The latitude of the point on earth in decimal form
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("latitude")]
        public float? Latitude { get; set; } = default!;

        /// <summary>
        /// The longitude of the point on earth in decimal form
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("longitude")]
        public float? Longitude { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GeoCoordinates FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<GeoCoordinates>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PhoneNumber
    {
        /// <summary>
        /// The raw input as the phone number is present in your raw data set. It will be parsed into the standardized formats if valid.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("input")]
        public string? Input { get; set; } = default!;

        /// <summary>
        /// Read-only. Parsed result in the international format (e.g. +49 123 ...)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("internationalFormatted")]
        public string? InternationalFormatted { get; set; } = default!;

        /// <summary>
        /// Optional. The ISO 3166-1 alpha-2 country code. This is used to figure out the correct countryCode and international format if only a national number (e.g. 0123 4567) is provided
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("defaultCountry")]
        public string? DefaultCountry { get; set; } = default!;

        /// <summary>
        /// Read-only. The numerical country code (e.g. 49)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("countryCode")]
        public double? CountryCode { get; set; } = default!;

        /// <summary>
        /// Read-only. The numerical representation of the national part
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("national")]
        public double? National { get; set; } = default!;

        /// <summary>
        /// Read-only. Parsed result in the national format (e.g. 0123 456789)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("nationalFormatted")]
        public string? NationalFormatted { get; set; } = default!;

        /// <summary>
        /// Read-only. Indicates whether the parsed number is a valid phone number
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("valid")]
        public bool? Valid { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PhoneNumber FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<PhoneNumber>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Object
    {
        /// <summary>
        /// Class of the Object, defined in the schema.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("class")]
        public string? Class { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vectorWeights")]
        public dynamic? VectorWeights { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("properties")]
        public dynamic? Properties { get; set; } = default!;

        /// <summary>
        /// ID of the Object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        /// <summary>
        /// (Response only) Timestamp of creation of this object in milliseconds since epoch UTC.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("creationTimeUnix")]
        public long? CreationTimeUnix { get; set; } = default!;

        /// <summary>
        /// (Response only) Timestamp of the last object update in milliseconds since epoch UTC.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastUpdateTimeUnix")]
        public long? LastUpdateTimeUnix { get; set; } = default!;

        /// <summary>
        /// This field returns vectors associated with the Object. C11yVector, Vector or Vectors values are possible.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("vector")]
        public C11yVector? Vector { get; set; } = default!;

        /// <summary>
        /// This field returns vectors associated with the Object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("vectors")]
        public Vectors? Vectors { get; set; } = default!;

        /// <summary>
        /// Name of the Objects tenant.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tenant")]
        public string? Tenant { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("additional")]
        public AdditionalProperties? Additional { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Object FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Object>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ObjectsGetResponse : Object
    {

        [System.Text.Json.Serialization.JsonPropertyName("deprecations")]
        public System.Collections.Generic.ICollection<Deprecation>? Deprecations { get; set; } = default!;

        /// <summary>
        /// Results for this specific Object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("result")]
        public Result2? Result { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ObjectsGetResponse FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ObjectsGetResponse>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BatchDelete
    {
        /// <summary>
        /// Outlines how to find the objects to be deleted.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("match")]
        public Match? Match { get; set; } = default!;

        /// <summary>
        /// Controls the verbosity of the output, possible values are: "minimal", "verbose". Defaults to "minimal".
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("output")]
        public string? Output { get; set; } = "minimal";

        /// <summary>
        /// Timestamp of deletion in milliseconds since epoch UTC.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deletionTimeUnixMilli")]
        public long? DeletionTimeUnixMilli { get; set; } = default!;

        /// <summary>
        /// If true, the call will show which objects would be matched using the specified filter without deleting any objects. &lt;br/&gt;&lt;br/&gt;Depending on the configured verbosity, you will either receive a count of affected objects, or a list of IDs.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("dryRun")]
        public bool? DryRun { get; set; } = false;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static BatchDelete FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<BatchDelete>(data, options);

        }

    }

    /// <summary>
    /// Delete Objects response.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BatchDeleteResponse
    {
        /// <summary>
        /// Outlines how to find the objects to be deleted.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("match")]
        public Match2? Match { get; set; } = default!;

        /// <summary>
        /// Controls the verbosity of the output, possible values are: "minimal", "verbose". Defaults to "minimal".
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("output")]
        public string? Output { get; set; } = "minimal";

        /// <summary>
        /// Timestamp of deletion in milliseconds since epoch UTC.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deletionTimeUnixMilli")]
        public long? DeletionTimeUnixMilli { get; set; } = default!;

        /// <summary>
        /// If true, objects will not be deleted yet, but merely listed. Defaults to false.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("dryRun")]
        public bool? DryRun { get; set; } = false;

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public Results? Results { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static BatchDeleteResponse FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<BatchDeleteResponse>(data, options);

        }

    }

    /// <summary>
    /// List of Objects.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ObjectsListResponse
    {
        /// <summary>
        /// The actual list of Objects.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("objects")]
        public System.Collections.Generic.ICollection<Object>? Objects { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("deprecations")]
        public System.Collections.Generic.ICollection<Deprecation>? Deprecations { get; set; } = default!;

        /// <summary>
        /// The total number of Objects for the query. The number of items in a response may be smaller due to paging.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("totalResults")]
        public long? TotalResults { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ObjectsListResponse FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ObjectsListResponse>(data, options);

        }

    }

    /// <summary>
    /// Manage classifications, trigger them and view status of past classifications.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Classification
    {
        /// <summary>
        /// ID to uniquely identify this classification run
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        /// <summary>
        /// class (name) which is used in this classification
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("class")]
        public string? Class { get; set; } = default!;

        /// <summary>
        /// which ref-property to set as part of the classification
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("classifyProperties")]
        public System.Collections.Generic.ICollection<string>? ClassifyProperties { get; set; } = default!;

        /// <summary>
        /// base the text-based classification on these fields (of type text)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("basedOnProperties")]
        public System.Collections.Generic.ICollection<string>? BasedOnProperties { get; set; } = default!;

        /// <summary>
        /// status of this classification
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ClassificationStatus? Status { get; set; } = default!;

        /// <summary>
        /// additional meta information about the classification
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("meta")]
        public ClassificationMeta? Meta { get; set; } = default!;

        /// <summary>
        /// which algorithm to use for classifications
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; } = default!;

        /// <summary>
        /// classification-type specific settings
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("settings")]
        public dynamic? Settings { get; set; } = default!;

        /// <summary>
        /// error message if status == failed
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public string? Error { get; set; } = "";

        [System.Text.Json.Serialization.JsonPropertyName("filters")]
        public Filters? Filters { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Classification FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Classification>(data, options);

        }

    }

    /// <summary>
    /// Additional information to a specific classification
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ClassificationMeta
    {
        /// <summary>
        /// time when this classification was started
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("started")]
        public System.DateTimeOffset? Started { get; set; } = default!;

        /// <summary>
        /// time when this classification finished
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("completed")]
        public System.DateTimeOffset? Completed { get; set; } = default!;

        /// <summary>
        /// number of objects which were taken into consideration for classification
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public int? Count { get; set; } = default!;

        /// <summary>
        /// number of objects successfully classified
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("countSucceeded")]
        public int? CountSucceeded { get; set; } = default!;

        /// <summary>
        /// number of objects which could not be classified - see error message for details
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("countFailed")]
        public int? CountFailed { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ClassificationMeta FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ClassificationMeta>(data, options);

        }

    }

    /// <summary>
    /// Filter search results using a where filter
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WhereFilter
    {
        /// <summary>
        /// combine multiple where filters, requires 'And' or 'Or' operator
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("operands")]
        public System.Collections.Generic.ICollection<WhereFilter>? Operands { get; set; } = default!;

        /// <summary>
        /// operator to use
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("operator")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public WhereFilterOperator? Operator { get; set; } = default!;

        /// <summary>
        /// path to the property currently being filtered
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("path")]
        public System.Collections.Generic.ICollection<string>? Path { get; set; } = default!;

        /// <summary>
        /// value as integer
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("valueInt")]
        public long? ValueInt { get; set; } = default!;

        /// <summary>
        /// value as number/float
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("valueNumber")]
        public double? ValueNumber { get; set; } = default!;

        /// <summary>
        /// value as boolean
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("valueBoolean")]
        public bool? ValueBoolean { get; set; } = default!;

        /// <summary>
        /// value as text (deprecated as of v1.19; alias for valueText)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("valueString")]
        public string? ValueString { get; set; } = default!;

        /// <summary>
        /// value as text
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("valueText")]
        public string? ValueText { get; set; } = default!;

        /// <summary>
        /// value as date (as string)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("valueDate")]
        public string? ValueDate { get; set; } = default!;

        /// <summary>
        /// value as integer
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("valueIntArray")]
        public System.Collections.Generic.ICollection<long>? ValueIntArray { get; set; } = default!;

        /// <summary>
        /// value as number/float
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("valueNumberArray")]
        public System.Collections.Generic.ICollection<double>? ValueNumberArray { get; set; } = default!;

        /// <summary>
        /// value as boolean
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("valueBooleanArray")]
        public System.Collections.Generic.ICollection<bool>? ValueBooleanArray { get; set; } = default!;

        /// <summary>
        /// value as text (deprecated as of v1.19; alias for valueText)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("valueStringArray")]
        public System.Collections.Generic.ICollection<string>? ValueStringArray { get; set; } = default!;

        /// <summary>
        /// value as text
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("valueTextArray")]
        public System.Collections.Generic.ICollection<string>? ValueTextArray { get; set; } = default!;

        /// <summary>
        /// value as date (as string)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("valueDateArray")]
        public System.Collections.Generic.ICollection<string>? ValueDateArray { get; set; } = default!;

        /// <summary>
        /// value as geo coordinates and distance
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("valueGeoRange")]
        public WhereFilterGeoRange? ValueGeoRange { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static WhereFilter FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<WhereFilter>(data, options);

        }

    }

    /// <summary>
    /// filter within a distance of a georange
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WhereFilterGeoRange
    {

        [System.Text.Json.Serialization.JsonPropertyName("geoCoordinates")]
        public GeoCoordinates? GeoCoordinates { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("distance")]
        public Distance? Distance { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static WhereFilterGeoRange FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<WhereFilterGeoRange>(data, options);

        }

    }

    /// <summary>
    /// attributes representing a single tenant within weaviate
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Tenant
    {
        /// <summary>
        /// The name of the tenant (required).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// activity status of the tenant's shard. Optional for creating tenant (implicit `ACTIVE`) and required for updating tenant. For creation, allowed values are `ACTIVE` - tenant is fully active and `INACTIVE` - tenant is inactive; no actions can be performed on tenant, tenant's files are stored locally. For updating, `ACTIVE`, `INACTIVE` and also `OFFLOADED` - as INACTIVE, but files are stored on cloud storage. The following values are read-only and are set by the server for internal use: `OFFLOADING` - tenant is transitioning from ACTIVE/INACTIVE to OFFLOADED, `ONLOADING` - tenant is transitioning from OFFLOADED to ACTIVE/INACTIVE. We still accept deprecated names `HOT` (now `ACTIVE`), `COLD` (now `INACTIVE`), `FROZEN` (now `OFFLOADED`), `FREEZING` (now `OFFLOADING`), `UNFREEZING` (now `ONLOADING`).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("activityStatus")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public TenantActivityStatus? ActivityStatus { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Tenant FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Tenant>(data, options);

        }

    }

    /// <summary>
    /// attributes representing a single tenant response within weaviate
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TenantResponse : Tenant
    {
        /// <summary>
        /// The list of nodes that owns that tenant data.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("belongsToNodes")]
        public System.Collections.Generic.ICollection<string>? BelongsToNodes { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static TenantResponse FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<TenantResponse>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body
    {
        /// <summary>
        /// if the key should be revoked when deactivating the user
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("revoke_key")]
        public bool? Revoke_key { get; set; } = false;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Body FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Body>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body2
    {
        /// <summary>
        /// permissions to be added to the role
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("permissions")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Permission> Permissions { get; set; } = new System.Collections.ObjectModel.Collection<Permission>();

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Body2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Body2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body3
    {
        /// <summary>
        /// permissions to remove from the role
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("permissions")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Permission> Permissions { get; set; } = new System.Collections.ObjectModel.Collection<Permission>();

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Body3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Body3>(data, options);

        }

    }

    /// <summary>
    /// The type of user
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UserType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"oidc")]
        Oidc = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"db")]
        Db = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body4
    {
        /// <summary>
        /// the roles that assigned to user
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("roles")]
        public System.Collections.Generic.ICollection<string>? Roles { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("userType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public UserTypeInput? UserType { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Body4 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Body4>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body5
    {
        /// <summary>
        /// the roles that revoked from the key or user
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("roles")]
        public System.Collections.Generic.ICollection<string>? Roles { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("userType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public UserTypeInput? UserType { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Body5 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Body5>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body6
    {
        /// <summary>
        /// the roles that assigned to group
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("roles")]
        public System.Collections.Generic.ICollection<string>? Roles { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Body6 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Body6>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body7
    {
        /// <summary>
        /// the roles that revoked from group
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("roles")]
        public System.Collections.Generic.ICollection<string>? Roles { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Body7 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Body7>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body8
    {
        /// <summary>
        /// Define which fields need to be returned. Default value is ALL
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fields")]

        // TODO(system.text.json): Add string enum item converter
        public System.Collections.Generic.ICollection<Fields>? Fields { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("objects")]
        public System.Collections.Generic.ICollection<Object>? Objects { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Body8 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Body8>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response
    {

        [System.Text.Json.Serialization.JsonPropertyName("links")]
        public System.Collections.Generic.ICollection<Link>? Links { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response2
    {
        /// <summary>
        /// The Location to redirect to
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("href")]
        public string? Href { get; set; } = default!;

        /// <summary>
        /// OAuth Client ID
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("clientId")]
        public string? ClientId { get; set; } = default!;

        /// <summary>
        /// OAuth Scopes
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("scopes")]
        public System.Collections.Generic.ICollection<string>? Scopes { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Response2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Response2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous
    {

        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        public string? UserId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("userType")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public UserTypeOutput UserType { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous2
    {
        /// <summary>
        /// The ID of the backup. Must be URL-safe and work as a filesystem path, only lowercase, numbers, underscore, minus characters allowed.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// destination path of backup files proper to selected backend
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("path")]
        public string? Path { get; set; } = default!;

        /// <summary>
        /// The list of classes for which the existed backup process
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("classes")]
        public System.Collections.Generic.ICollection<string>? Classes { get; set; } = default!;

        /// <summary>
        /// status of backup process
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Status? Status { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DBUserInfoDbUserType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"db_user")]
        Db_user = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"db_env_user")]
        Db_env_user = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Backups
    {
        /// <summary>
        /// string or regex. if a specific collection name, if left empty it will be ALL or *
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("collection")]
        public string? Collection { get; set; } = "*";

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Backups FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Backups>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data
    {
        /// <summary>
        /// string or regex. if a specific collection name, if left empty it will be ALL or *
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("collection")]
        public string? Collection { get; set; } = "*";

        /// <summary>
        /// string or regex. if a specific tenant name, if left empty it will be ALL or *
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tenant")]
        public string? Tenant { get; set; } = "*";

        /// <summary>
        /// string or regex. if a specific object ID, if left empty it will be ALL or *
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("object")]
        public string? Object { get; set; } = "*";

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Data FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Data>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Nodes
    {
        /// <summary>
        /// whether to allow (verbose) returning shards and stats data in the response
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("verbosity")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public NodesVerbosity? Verbosity { get; set; } = Weaviate.Client.Rest.Dto.NodesVerbosity.Minimal;

        /// <summary>
        /// string or regex. if a specific collection name, if left empty it will be ALL or *
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("collection")]
        public string? Collection { get; set; } = "*";

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Nodes FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Nodes>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Users
    {
        /// <summary>
        /// string or regex. if a specific name, if left empty it will be ALL or *
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("users")]
        public string? Users1 { get; set; } = "*";

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Users FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Users>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Tenants
    {
        /// <summary>
        /// string or regex. if a specific collection name, if left empty it will be ALL or *
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("collection")]
        public string? Collection { get; set; } = "*";

        /// <summary>
        /// string or regex. if a specific tenant name, if left empty it will be ALL or *
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tenant")]
        public string? Tenant { get; set; } = "*";

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Tenants FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Tenants>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Roles
    {
        /// <summary>
        /// string or regex. if a specific role name, if left empty it will be ALL or *
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("role")]
        public string? Role { get; set; } = "*";

        /// <summary>
        /// set the scope for the manage role permission
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("scope")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public RolesScope? Scope { get; set; } = Weaviate.Client.Rest.Dto.RolesScope.Match;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Roles FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Roles>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Collections
    {
        /// <summary>
        /// string or regex. if a specific collection name, if left empty it will be ALL or *
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("collection")]
        public string? Collection { get; set; } = "*";

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Collections FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Collections>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PermissionAction
    {

        [System.Runtime.Serialization.EnumMember(Value = @"manage_backups")]
        Manage_backups = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"read_cluster")]
        Read_cluster = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"create_data")]
        Create_data = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"read_data")]
        Read_data = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"update_data")]
        Update_data = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"delete_data")]
        Delete_data = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"read_nodes")]
        Read_nodes = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"create_roles")]
        Create_roles = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"read_roles")]
        Read_roles = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"update_roles")]
        Update_roles = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"delete_roles")]
        Delete_roles = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"create_collections")]
        Create_collections = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"read_collections")]
        Read_collections = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"update_collections")]
        Update_collections = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"delete_collections")]
        Delete_collections = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"assign_and_revoke_users")]
        Assign_and_revoke_users = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"create_users")]
        Create_users = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"read_users")]
        Read_users = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"update_users")]
        Update_users = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"delete_users")]
        Delete_users = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"create_tenants")]
        Create_tenants = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"read_tenants")]
        Read_tenants = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"update_tenants")]
        Update_tenants = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"delete_tenants")]
        Delete_tenants = 23,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConcatenatedWord
    {

        [System.Text.Json.Serialization.JsonPropertyName("concatenatedWord")]
        public string? ConcatenatedWord1 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("singleWords")]
        public System.Collections.Generic.ICollection<dynamic>? SingleWords { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("concatenatedVector")]
        public C11yVector? ConcatenatedVector { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("concatenatedNearestNeighbors")]
        public C11yNearestNeighbors? ConcatenatedNearestNeighbors { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ConcatenatedWord FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ConcatenatedWord>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IndividualWords
    {

        [System.Text.Json.Serialization.JsonPropertyName("word")]
        public string? Word { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("present")]
        public bool? Present { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("info")]
        public Info? Info { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static IndividualWords FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<IndividualWords>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous3
    {

        [System.Text.Json.Serialization.JsonPropertyName("word")]
        public string? Word { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("distance")]
        public float? Distance { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous3 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous3>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous4
    {
        /// <summary>
        /// Vectorized classname.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("classVectors")]
        [System.ComponentModel.DataAnnotations.MinLength(300)]
        [System.ComponentModel.DataAnnotations.MaxLength(300)]
        public System.Collections.Generic.ICollection<float>? ClassVectors { get; set; } = default!;

        /// <summary>
        /// Vectorized properties.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("classProps")]
        [System.ComponentModel.DataAnnotations.MinLength(300)]
        [System.ComponentModel.DataAnnotations.MaxLength(300)]
        public System.Collections.Generic.ICollection<ClassProps>? ClassProps { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Anonymous4 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Anonymous4>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Error
    {

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Error FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Error>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Locations
    {

        [System.Text.Json.Serialization.JsonPropertyName("column")]
        public long? Column { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("line")]
        public long? Line { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Locations FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Locations>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ReplicationConfigDeletionStrategy
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NoAutomatedResolution")]
        NoAutomatedResolution = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DeleteOnConflict")]
        DeleteOnConflict = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"TimeBasedResolution")]
        TimeBasedResolution = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PatchDocumentObjectOp
    {

        [System.Runtime.Serialization.EnumMember(Value = @"add")]
        Add = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"remove")]
        Remove = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"replace")]
        Replace = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"move")]
        Move = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"copy")]
        Copy = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"test")]
        Test = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PatchDocumentActionOp
    {

        [System.Runtime.Serialization.EnumMember(Value = @"add")]
        Add = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"remove")]
        Remove = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"replace")]
        Replace = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"move")]
        Move = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"copy")]
        Copy = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"test")]
        Test = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ReplicationReplicateDetailsReplicaStatusState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"READY")]
        READY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INDEXING")]
        INDEXING = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"REPLICATION_FINALIZING")]
        REPLICATION_FINALIZING = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"REPLICATION_HYDRATING")]
        REPLICATION_HYDRATING = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"REPLICATION_DEHYDRATING")]
        REPLICATION_DEHYDRATING = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PropertyTokenization
    {

        [System.Runtime.Serialization.EnumMember(Value = @"word")]
        Word = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"lowercase")]
        Lowercase = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"whitespace")]
        Whitespace = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"field")]
        Field = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"trigram")]
        Trigram = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"gse")]
        Gse = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"kagome_kr")]
        Kagome_kr = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"kagome_ja")]
        Kagome_ja = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"gse_ch")]
        Gse_ch = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum NestedPropertyTokenization
    {

        [System.Runtime.Serialization.EnumMember(Value = @"word")]
        Word = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"lowercase")]
        Lowercase = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"whitespace")]
        Whitespace = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"field")]
        Field = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"trigram")]
        Trigram = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"gse")]
        Gse = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"kagome_kr")]
        Kagome_kr = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"kagome_ja")]
        Kagome_ja = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"gse_ch")]
        Gse_ch = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BackupCreateStatusResponseStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"STARTED")]
        STARTED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TRANSFERRING")]
        TRANSFERRING = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"TRANSFERRED")]
        TRANSFERRED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SUCCESS")]
        SUCCESS = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FAILED")]
        FAILED = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CANCELED")]
        CANCELED = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BackupRestoreStatusResponseStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"STARTED")]
        STARTED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TRANSFERRING")]
        TRANSFERRING = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"TRANSFERRED")]
        TRANSFERRED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SUCCESS")]
        SUCCESS = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FAILED")]
        FAILED = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CANCELED")]
        CANCELED = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BackupConfigCompressionLevel
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DefaultCompression")]
        DefaultCompression = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BestSpeed")]
        BestSpeed = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BestCompression")]
        BestCompression = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BackupCreateResponseStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"STARTED")]
        STARTED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TRANSFERRING")]
        TRANSFERRING = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"TRANSFERRED")]
        TRANSFERRED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SUCCESS")]
        SUCCESS = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FAILED")]
        FAILED = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CANCELED")]
        CANCELED = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BackupRestoreResponseStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"STARTED")]
        STARTED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TRANSFERRING")]
        TRANSFERRING = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"TRANSFERRED")]
        TRANSFERRED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SUCCESS")]
        SUCCESS = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FAILED")]
        FAILED = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CANCELED")]
        CANCELED = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum NodeStatusStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"HEALTHY")]
        HEALTHY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"UNHEALTHY")]
        UNHEALTHY = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"UNAVAILABLE")]
        UNAVAILABLE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"TIMEOUT")]
        TIMEOUT = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum StatisticsStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"HEALTHY")]
        HEALTHY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"UNHEALTHY")]
        UNHEALTHY = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"UNAVAILABLE")]
        UNAVAILABLE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"TIMEOUT")]
        TIMEOUT = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Result
    {

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ResultStatus? Status { get; set; } = Weaviate.Client.Rest.Dto.ResultStatus.SUCCESS;

        [System.Text.Json.Serialization.JsonPropertyName("errors")]
        public ErrorResponse? Errors { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Result FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Result>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Result2
    {

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Result2Status? Status { get; set; } = Weaviate.Client.Rest.Dto.Result2Status.SUCCESS;

        [System.Text.Json.Serialization.JsonPropertyName("errors")]
        public ErrorResponse? Errors { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Result2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Result2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Match
    {
        /// <summary>
        /// Class (name) which objects will be deleted.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("class")]
        public string? Class { get; set; } = default!;

        /// <summary>
        /// Filter to limit the objects to be deleted.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("where")]
        public WhereFilter? Where { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Match FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Match>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Match2
    {
        /// <summary>
        /// Class (name) which objects will be deleted.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("class")]
        public string? Class { get; set; } = default!;

        /// <summary>
        /// Filter to limit the objects to be deleted.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("where")]
        public WhereFilter? Where { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Match2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Match2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Results
    {
        /// <summary>
        /// How many objects were matched by the filter.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("matches")]
        public double? Matches { get; set; } = default!;

        /// <summary>
        /// The most amount of objects that can be deleted in a single query, equals QUERY_MAXIMUM_RESULTS.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("limit")]
        public double? Limit { get; set; } = default!;

        /// <summary>
        /// How many objects were successfully deleted in this round.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("successful")]
        public double? Successful { get; set; } = default!;

        /// <summary>
        /// How many objects should have been deleted but could not be deleted.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("failed")]
        public double? Failed { get; set; } = default!;

        /// <summary>
        /// With output set to "minimal" only objects with error occurred will the be described. Successfully deleted objects would be omitted. Output set to "verbose" will list all of the objets with their respective statuses.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("objects")]
        public System.Collections.Generic.ICollection<Objects>? Objects { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Results FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Results>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ClassificationStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"running")]
        Running = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"completed")]
        Completed = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"failed")]
        Failed = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Filters
    {
        /// <summary>
        /// limit the objects to be classified
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("sourceWhere")]
        public WhereFilter? SourceWhere { get; set; } = default!;

        /// <summary>
        /// Limit the training objects to be considered during the classification. Can only be used on types with explicit training sets, such as 'knn'
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("trainingSetWhere")]
        public WhereFilter? TrainingSetWhere { get; set; } = default!;

        /// <summary>
        /// Limit the possible sources when using an algorithm which doesn't really on training data, e.g. 'contextual'. When using an algorithm with a training set, such as 'knn', limit the training set instead
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("targetWhere")]
        public WhereFilter? TargetWhere { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Filters FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Filters>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum WhereFilterOperator
    {

        [System.Runtime.Serialization.EnumMember(Value = @"And")]
        And = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Or")]
        Or = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Equal")]
        Equal = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Like")]
        Like = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"NotEqual")]
        NotEqual = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"GreaterThan")]
        GreaterThan = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"GreaterThanEqual")]
        GreaterThanEqual = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"LessThan")]
        LessThan = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"LessThanEqual")]
        LessThanEqual = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"WithinGeoRange")]
        WithinGeoRange = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"IsNull")]
        IsNull = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"ContainsAny")]
        ContainsAny = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"ContainsAll")]
        ContainsAll = 12,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Distance
    {

        [System.Text.Json.Serialization.JsonPropertyName("max")]
        public double? Max { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Distance FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Distance>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TenantActivityStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE")]
        ACTIVE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INACTIVE")]
        INACTIVE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"OFFLOADED")]
        OFFLOADED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"OFFLOADING")]
        OFFLOADING = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ONLOADING")]
        ONLOADING = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"HOT")]
        HOT = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"COLD")]
        COLD = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"FROZEN")]
        FROZEN = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"FREEZING")]
        FREEZING = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"UNFREEZING")]
        UNFREEZING = 9,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Fields
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ALL")]
        ALL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"class")]
        Class = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"schema")]
        Schema = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"creationTimeUnix")]
        CreationTimeUnix = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"STARTED")]
        STARTED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TRANSFERRING")]
        TRANSFERRING = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"TRANSFERRED")]
        TRANSFERRED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SUCCESS")]
        SUCCESS = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FAILED")]
        FAILED = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CANCELED")]
        CANCELED = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum NodesVerbosity
    {

        [System.Runtime.Serialization.EnumMember(Value = @"verbose")]
        Verbose = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"minimal")]
        Minimal = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RolesScope
    {

        [System.Runtime.Serialization.EnumMember(Value = @"all")]
        All = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"match")]
        Match = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Info
    {

        [System.Text.Json.Serialization.JsonPropertyName("vector")]
        public C11yVector? Vector { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nearestNeighbors")]
        public C11yNearestNeighbors? NearestNeighbors { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Info FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Info>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ClassProps
    {

        [System.Text.Json.Serialization.JsonPropertyName("propsVectors")]
        public System.Collections.Generic.ICollection<float>? PropsVectors { get; set; } = default!;

        /// <summary>
        /// String with valuename.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public string? Value { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ClassProps FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ClassProps>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ResultStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SUCCESS")]
        SUCCESS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FAILED")]
        FAILED = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Result2Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SUCCESS")]
        SUCCESS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FAILED")]
        FAILED = 1,

    }

    /// <summary>
    /// Results for this specific Object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Objects
    {
        /// <summary>
        /// ID of the Object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ObjectsStatus? Status { get; set; } = Weaviate.Client.Rest.Dto.ObjectsStatus.SUCCESS;

        [System.Text.Json.Serialization.JsonPropertyName("errors")]
        public ErrorResponse? Errors { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Objects FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Objects>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ObjectsStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SUCCESS")]
        SUCCESS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DRYRUN")]
        DRYRUN = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FAILED")]
        FAILED = 2,

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WeaviateApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string? Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public WeaviateApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception? innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WeaviateApiException<TResult> : WeaviateApiException
    {
        public TResult Result { get; private set; }

        public WeaviateApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception? innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 108
#pragma warning restore 114
#pragma warning restore 472
#pragma warning restore 612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8600
#pragma warning restore 8602
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625